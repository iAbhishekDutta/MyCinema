{"ast":null,"code":"'use strict';\n\nvar Url = require('url');\n\nvar internals = {\n  minDomainSegments: 2,\n  nonAsciiRx: /[^\\x00-\\x7f]/,\n  domainControlRx: /[\\x00-\\x20@\\:\\/]/,\n  // Control + space + separators\n  tldSegmentRx: /^[a-zA-Z](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?$/,\n  domainSegmentRx: /^[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?$/,\n  URL: Url.URL || URL // $lab:coverage:ignore$\n\n};\n\nexports.analyze = function (domain) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof domain !== 'string') {\n    throw new Error('Invalid input: domain must be a string');\n  }\n\n  if (!domain) {\n    return {\n      error: 'Domain must be a non-empty string'\n    };\n  }\n\n  if (domain.length > 256) {\n    return {\n      error: 'Domain too long'\n    };\n  }\n\n  var ascii = !internals.nonAsciiRx.test(domain);\n\n  if (!ascii) {\n    if (options.allowUnicode === false) {\n      // Defaults to true\n      return {\n        error: 'Domain contains forbidden Unicode characters'\n      };\n    }\n\n    domain = domain.normalize('NFC');\n  }\n\n  if (internals.domainControlRx.test(domain)) {\n    return {\n      error: 'Domain contains invalid character'\n    };\n  }\n\n  domain = internals.punycode(domain); // https://tools.ietf.org/html/rfc1035 section 2.3.1\n\n  var minDomainSegments = options.minDomainSegments || internals.minDomainSegments;\n  var segments = domain.split('.');\n\n  if (segments.length < minDomainSegments) {\n    return {\n      error: 'Domain lacks the minimum required number of segments'\n    };\n  }\n\n  var tlds = options.tlds;\n\n  if (tlds) {\n    var tld = segments[segments.length - 1].toLowerCase();\n\n    if (tlds.deny && tlds.deny.has(tld) || tlds.allow && !tlds.allow.has(tld)) {\n      return {\n        error: 'Domain uses forbidden TLD'\n      };\n    }\n  }\n\n  for (var i = 0; i < segments.length; ++i) {\n    var segment = segments[i];\n\n    if (!segment.length) {\n      return {\n        error: 'Domain contains empty dot-separated segment'\n      };\n    }\n\n    if (segment.length > 63) {\n      return {\n        error: 'Domain contains dot-separated segment that is too long'\n      };\n    }\n\n    if (i < segments.length - 1) {\n      if (!internals.domainSegmentRx.test(segment)) {\n        return {\n          error: 'Domain contains invalid character'\n        };\n      }\n    } else {\n      if (!internals.tldSegmentRx.test(segment)) {\n        return {\n          error: 'Domain contains invalid tld character'\n        };\n      }\n    }\n  }\n};\n\nexports.isValid = function (domain, options) {\n  return !exports.analyze(domain, options);\n};\n\ninternals.punycode = function (domain) {\n  try {\n    return new internals.URL(\"http://\".concat(domain)).host;\n  } catch (err) {\n    return domain;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}