{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"A:\\\\Programs\\\\jali\\\\iCinema-master\\\\iCinema-master\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"A:\\\\Programs\\\\jali\\\\iCinema-master\\\\iCinema-master\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"A:\\\\Programs\\\\jali\\\\iCinema-master\\\\iCinema-master\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar Assert = require('@hapi/hoek/lib/assert');\n\nvar internals = {};\n\nmodule.exports = /*#__PURE__*/function () {\n  function Topo() {\n    _classCallCheck(this, Topo);\n\n    this._items = [];\n    this.nodes = [];\n  }\n\n  _createClass(Topo, [{\n    key: \"add\",\n    value: function add(nodes, options) {\n      options = options || {}; // Validate rules\n\n      var before = [].concat(options.before || []);\n      var after = [].concat(options.after || []);\n      var group = options.group || '?';\n      var sort = options.sort || 0; // Used for merging only\n\n      Assert(!before.includes(group), \"Item cannot come before itself: \".concat(group));\n      Assert(!before.includes('?'), 'Item cannot come before unassociated items');\n      Assert(!after.includes(group), \"Item cannot come after itself: \".concat(group));\n      Assert(!after.includes('?'), 'Item cannot come after unassociated items');\n\n      if (!Array.isArray(nodes)) {\n        nodes = [nodes];\n      }\n\n      var _iterator = _createForOfIteratorHelper(nodes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var node = _step.value;\n          var item = {\n            seq: this._items.length,\n            sort: sort,\n            before: before,\n            after: after,\n            group: group,\n            node: node\n          };\n\n          this._items.push(item);\n        } // Insert event\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var valid = this._sort();\n\n      Assert(valid, 'item', group !== '?' ? \"added into group \".concat(group) : '', 'created a dependencies error');\n      return this.nodes;\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(others) {\n      if (!Array.isArray(others)) {\n        others = [others];\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(others),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var other = _step2.value;\n\n          if (other) {\n            var _iterator3 = _createForOfIteratorHelper(other._items),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var item = _step3.value;\n\n                this._items.push(Object.assign({}, item)); // Shallow cloned\n\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n        } // Sort items\n\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this._items.sort(internals.mergeSort);\n\n      for (var i = 0; i < this._items.length; ++i) {\n        this._items[i].seq = i;\n      }\n\n      var valid = this._sort();\n\n      Assert(valid, 'merge created a dependencies error');\n      return this.nodes;\n    }\n  }, {\n    key: \"_sort\",\n    value: function _sort() {\n      // Construct graph\n      var graph = {};\n      var graphAfters = Object.create(null); // A prototype can bungle lookups w/ false positives\n\n      var groups = Object.create(null);\n\n      var _iterator4 = _createForOfIteratorHelper(this._items),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var item = _step4.value;\n          var seq = item.seq; // Unique across all items\n\n          var _group2 = item.group; // Determine Groups\n\n          groups[_group2] = groups[_group2] || [];\n\n          groups[_group2].push(seq); // Build intermediary graph using 'before'\n\n\n          graph[seq] = item.before; // Build second intermediary graph with 'after'\n\n          var _iterator8 = _createForOfIteratorHelper(item.after),\n              _step8;\n\n          try {\n            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n              var after = _step8.value;\n              graphAfters[after] = graphAfters[after] || [];\n              graphAfters[after].push(seq);\n            }\n          } catch (err) {\n            _iterator8.e(err);\n          } finally {\n            _iterator8.f();\n          }\n        } // Expand intermediary graph\n\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      for (var node in graph) {\n        var expandedGroups = [];\n\n        for (var graphNodeItem in graph[node]) {\n          var group = graph[node][graphNodeItem];\n          groups[group] = groups[group] || [];\n          expandedGroups.push.apply(expandedGroups, _toConsumableArray(groups[group]));\n        }\n\n        graph[node] = expandedGroups;\n      } // Merge intermediary graph using graphAfters into final graph\n\n\n      for (var _group in graphAfters) {\n        if (groups[_group]) {\n          var _iterator5 = _createForOfIteratorHelper(groups[_group]),\n              _step5;\n\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var _graph$_node;\n\n              var _node = _step5.value;\n\n              (_graph$_node = graph[_node]).push.apply(_graph$_node, _toConsumableArray(graphAfters[_group]));\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n        }\n      } // Compile ancestors\n\n\n      var ancestors = {};\n\n      for (var _node2 in graph) {\n        var children = graph[_node2];\n\n        var _iterator6 = _createForOfIteratorHelper(children),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var child = _step6.value;\n            ancestors[child] = ancestors[child] || [];\n            ancestors[child].push(_node2);\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n      } // Topo sort\n\n\n      var visited = {};\n      var sorted = [];\n\n      for (var i = 0; i < this._items.length; ++i) {\n        // Looping through item.seq values out of order\n        var next = i;\n\n        if (ancestors[i]) {\n          next = null;\n\n          for (var j = 0; j < this._items.length; ++j) {\n            // As above, these are item.seq values\n            if (visited[j] === true) {\n              continue;\n            }\n\n            if (!ancestors[j]) {\n              ancestors[j] = [];\n            }\n\n            var shouldSeeCount = ancestors[j].length;\n            var seenCount = 0;\n\n            for (var k = 0; k < shouldSeeCount; ++k) {\n              if (visited[ancestors[j][k]]) {\n                ++seenCount;\n              }\n            }\n\n            if (seenCount === shouldSeeCount) {\n              next = j;\n              break;\n            }\n          }\n        }\n\n        if (next !== null) {\n          visited[next] = true;\n          sorted.push(next);\n        }\n      }\n\n      if (sorted.length !== this._items.length) {\n        return false;\n      }\n\n      var seqIndex = {};\n\n      var _iterator7 = _createForOfIteratorHelper(this._items),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _item = _step7.value;\n          seqIndex[_item.seq] = _item;\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      this._items = [];\n      this.nodes = [];\n\n      for (var _i = 0, _sorted = sorted; _i < _sorted.length; _i++) {\n        var value = _sorted[_i];\n        var sortedItem = seqIndex[value];\n        this.nodes.push(sortedItem.node);\n\n        this._items.push(sortedItem);\n      }\n\n      return true;\n    }\n  }]);\n\n  return Topo;\n}();\n\ninternals.mergeSort = function (a, b) {\n  return a.sort === b.sort ? 0 : a.sort < b.sort ? -1 : 1;\n};","map":null,"metadata":{},"sourceType":"script"}