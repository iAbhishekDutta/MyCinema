{"ast":null,"code":"'use strict';\n\nvar Domain = require('./domain');\n\nvar Email = require('./email');\n\nvar Tlds = require('./tlds');\n\nvar internals = {\n  defaultTlds: {\n    allow: Tlds,\n    deny: null\n  }\n};\nmodule.exports = {\n  domain: {\n    analyze: function analyze(domain, options) {\n      options = internals.options(options);\n      return Domain.analyze(domain, options);\n    },\n    isValid: function isValid(domain, options) {\n      options = internals.options(options);\n      return Domain.isValid(domain, options);\n    }\n  },\n  email: {\n    analyze: function analyze(email, options) {\n      options = internals.options(options);\n      return Email.analyze(email, options);\n    },\n    isValid: function isValid(email, options) {\n      options = internals.options(options);\n      return Email.isValid(email, options);\n    }\n  }\n};\n\ninternals.options = function (options) {\n  if (!options) {\n    return {\n      tlds: internals.defaultTlds\n    };\n  }\n\n  if (options.tlds === false) {\n    // Defaults to true\n    return options;\n  }\n\n  if (!options.tlds || options.tlds === true) {\n    return Object.assign({}, options, {\n      tlds: internals.defaultTlds\n    });\n  }\n\n  if (typeof options.tlds !== 'object') {\n    throw new Error('Invalid options: tlds must be a boolean or an object');\n  }\n\n  if (options.tlds.deny) {\n    if (options.tlds.deny instanceof Set === false) {\n      throw new Error('Invalid options: tlds.deny must be a Set object');\n    }\n\n    if (options.tlds.allow) {\n      throw new Error('Invalid options: cannot specify both tlds.allow and tlds.deny lists');\n    }\n\n    return options;\n  }\n\n  if (options.tlds.allow === true) {\n    return Object.assign({}, options, {\n      tlds: internals.defaultTlds\n    });\n  }\n\n  if (options.tlds.allow instanceof Set === false) {\n    throw new Error('Invalid options: tlds.allow must be a Set object or true');\n  }\n\n  return options;\n};","map":null,"metadata":{},"sourceType":"script"}