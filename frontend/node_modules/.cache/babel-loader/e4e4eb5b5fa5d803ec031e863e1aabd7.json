{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"A:\\\\Programs\\\\jali\\\\iCinema-master\\\\iCinema-master\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar Types = require('./types');\n\nvar Utils = require('./utils');\n\nvar internals = {\n  needsProtoHack: new Set([Types.set, Types.map, Types.weakSet, Types.weakMap])\n};\n\nmodule.exports = internals.clone = function (obj) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _seen = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  if (typeof obj !== 'object' || obj === null) {\n    return obj;\n  }\n\n  var clone = internals.clone;\n  var seen = _seen;\n\n  if (options.shallow) {\n    if (options.shallow !== true) {\n      return internals.cloneWithShallow(obj, options);\n    }\n\n    clone = function clone(value) {\n      return value;\n    };\n  } else {\n    seen = seen || new Map();\n    var lookup = seen.get(obj);\n\n    if (lookup) {\n      return lookup;\n    }\n  } // Built-in object types\n\n\n  var baseProto = Types.getInternalProto(obj);\n\n  if (baseProto === Types.buffer) {\n    return Buffer && Buffer.from(obj); // $lab:coverage:ignore$\n  }\n\n  if (baseProto === Types.date) {\n    return new Date(obj.getTime());\n  }\n\n  if (baseProto === Types.regex) {\n    return new RegExp(obj);\n  } // Generic objects\n\n\n  var newObj = internals.base(obj, baseProto, options);\n\n  if (newObj === obj) {\n    return obj;\n  }\n\n  if (seen) {\n    seen.set(obj, newObj); // Set seen, since obj could recurse\n  }\n\n  if (baseProto === Types.set) {\n    var _iterator = _createForOfIteratorHelper(obj),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var value = _step.value;\n        newObj.add(clone(value, options, seen));\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else if (baseProto === Types.map) {\n    var _iterator2 = _createForOfIteratorHelper(obj),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 2),\n            key = _step2$value[0],\n            _value = _step2$value[1];\n\n        newObj.set(key, clone(_value, options, seen));\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  var keys = Utils.keys(obj, options);\n\n  var _iterator3 = _createForOfIteratorHelper(keys),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _key = _step3.value;\n\n      if (_key === '__proto__') {\n        continue;\n      }\n\n      if (baseProto === Types.array && _key === 'length') {\n        newObj.length = obj.length;\n        continue;\n      }\n\n      var descriptor = Object.getOwnPropertyDescriptor(obj, _key);\n\n      if (descriptor) {\n        if (descriptor.get || descriptor.set) {\n          Object.defineProperty(newObj, _key, descriptor);\n        } else if (descriptor.enumerable) {\n          newObj[_key] = clone(obj[_key], options, seen);\n        } else {\n          Object.defineProperty(newObj, _key, {\n            enumerable: false,\n            writable: true,\n            configurable: true,\n            value: clone(obj[_key], options, seen)\n          });\n        }\n      } else {\n        Object.defineProperty(newObj, _key, {\n          enumerable: true,\n          writable: true,\n          configurable: true,\n          value: clone(obj[_key], options, seen)\n        });\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return newObj;\n};\n\ninternals.cloneWithShallow = function (source, options) {\n  var keys = options.shallow;\n  options = Object.assign({}, options);\n  options.shallow = false;\n  var storage = Utils.store(source, keys); // Move shallow copy items to storage\n\n  var copy = internals.clone(source, options); // Deep copy the rest\n\n  Utils.restore(copy, source, storage); // Shallow copy the stored items and restore\n\n  return copy;\n};\n\ninternals.base = function (obj, baseProto, options) {\n  if (baseProto === Types.array) {\n    return [];\n  }\n\n  if (options.prototype === false) {\n    // Defaults to true\n    if (internals.needsProtoHack.has(baseProto)) {\n      return new baseProto.constructor();\n    }\n\n    return {};\n  }\n\n  var proto = Object.getPrototypeOf(obj);\n\n  if (proto && proto.isImmutable) {\n    return obj;\n  }\n\n  if (internals.needsProtoHack.has(baseProto)) {\n    var newObj = new proto.constructor();\n\n    if (proto !== baseProto) {\n      Object.setPrototypeOf(newObj, proto);\n    }\n\n    return newObj;\n  }\n\n  return Object.create(proto);\n};","map":null,"metadata":{},"sourceType":"script"}